#!/usr/local/bin/python2.7
import dash
from dash.dependencies import Input, Output, Event, State
import dash_core_components as dcc
import dash_html_components as html
from flask import Flask
import hvac
#from pandas_datareader import data as web
#from datetime import datetime as dt
import re
import os
from pymongo import MongoClient
import subprocess
import datetime
import sys
#import pymongo
vault_token=subprocess.Popen('cat /run/secrets/clarify-vault-token', shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]
os.environ['VAULT_TOKEN']=vault_token.strip()
os.environ['no_proxy']='vault'
os.environ['VAULT_URL']='http://vault:8200'
client = hvac.Client()
client = hvac.Client(
 url=os.environ['VAULT_URL'],
 token=os.environ['VAULT_TOKEN']
)

clarify_mongo_user=client.read('lg-bss-clarify/mongo-creds')['data']['mongo-user']
clarify_mongo_pwd=client.read('lg-bss-clarify/mongo-creds')['data']['mongo-pwd']

gitlab_user=client.read('lg-bss-clarify/orchadop-creds')['data']['orchadop-user']
gitlab_pwd=client.read('lg-bss-clarify/orchadop-creds')['data']['orchadop-pwd']

connection=MongoClient('mongodb://'+clarify_mongo_user+':'+clarify_mongo_pwd+'@mongodb:27017/libertyglobal-bss-clarify?ssl=false')
db=connection['libertyglobal-bss-clarify']

server = Flask(__name__)
#table data style
td_style={'padding-top':'10px', 'padding-bottom':'10px','padding-left': '10px','padding-right': '10px','color':'#1A5276'}
#table heading style
th_style={'padding-top':'10px', 'padding-bottom':'10px','padding-left': '10px','padding-right': '10px','color':'#BA4A00'}

app = dash.Dash(__name__,url_base_pathname='/cdc/',server=server)
app.config.supress_callback_exceptions=True  #It is set to suppress the exception that is generated while assigning callbacks to components that are not in the initial layout but are generated by other callbacks
#server = app.server
app.css.config.serve_locally = True
app.scripts.config.serve_locally = True
#This key value pair is for loading the 2 dropdowns AAplication Name and Environment
#Key is for Application name and Value is for Environment
affiliate_list=['AT','CH','CZ','NL','RO']

def cdc(rm_to_be_sent, rm_to_be_removed):
  print "Entered CDC function"
  remove_us_dict={}
  send_us_dict={}
  # this for loop is to generate file lists of sending and removing rms
  for each_repo in ['cbbatch-'+country, 'cbform-'+country, 'globals-'+country]:
    sending_file_list=[]
    removing_file_list=[]
    os.chdir('/clarify_cdc/'+each_repo)
    print os.getcwd()
    print "Entered repo " + each_repo
    sending_cmd = "git log --all --no-merges -i --grep="+rm_to_be_sent+" --date-order | grep '^commit '| awk '{print $2}'"
    print sending_cmd
    sending_commit_list=filter(None, subprocess.Popen(sending_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0].split('\n'))
    print "sending commit list"
    print sending_commit_list
    for each_commit in sending_commit_list:
      tagged_file_cmd = "git diff-tree --no-commit-id --name-only -r "+each_commit
      untagged_file_cmd="git diff-tree --diff-filter=D --no-commit-id --name-only -r "+each_commit
      sending_file_list.extend(filter(None, subprocess.Popen(tagged_file_cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate()[0].split('\n')))
      sending_file_list=list(set(sending_file_list))
      [ sending_file_list.remove(D_file) for D_file in filter(None, subprocess.Popen(untagged_file_cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate()[0].split('\n')) if D_file in sending_file_list ]
    removing_cmd = "git log --all --no-merges -i --grep="+rm_to_be_removed+" --date-order | grep '^commit '| awk '{print $2}'"
    print removing_cmd
    removing_commit_list=filter(None, subprocess.Popen(removing_cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate()[0].split('\n'))
    print "removing commit list : " + str(removing_commit_list)
    for each_commit in removing_commit_list:
      tagged_file_cmd = "git diff-tree --no-commit-id --name-only -r "+each_commit
      untagged_file_cmd="git diff-tree --diff-filter=D --no-commit-id --name-only -r "+each_commit
      removing_file_list.extend(filter(None, subprocess.Popen(tagged_file_cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate()[0].split('\n')))
      removing_file_list=list(set(removing_file_list))
      [ removing_file_list.remove(D_file) for D_file in filter(None, subprocess.Popen(untagged_file_cmd, shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE).communicate()[0].split('\n')) if D_file in removing_file_list ]
  # this for loop is to revert the changes for each file
    print "sending file list : " + str(sending_file_list)
    print "remove file list : " + str(removing_file_list)
    flag=False
    for each_sending_file in sending_file_list:
      if each_sending_file in removing_file_list:
        #remove_commit_cmd="git log --all --no-merges --format='%h %s' "+each_sending_file+" | grep "+rm_to_be_removed+" | head -1 | awk -F' ' '{print $1}'"
        #print remove_commit_cmd
        #remove_commit_sha=subprocess.Popen(remove_commit_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        #print "removing rm's latest commit = "+ remove_commit_sha
        remove_us_list=coll_handler.find({'RM_ID.'+rm_to_be_removed : {'$exists' : True}}, {'_id' : 1})
        get_us_by_modified_datewise="git branch -a --sort=-committerdate | awk -F'origin/' '{print $NF}' | uniq"
        modified_datewise_us=subprocess.Popen(get_us_by_modified_datewise,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        modified_datewise_us_list=list(set(modified_datewise_us.strip().splitlines()))
        for each_us_dict in remove_us_list:
          for datewise_git_branch in modified_datewise_us_list:
            if datewise_git_branch.find(each_us_dict['_id']) > -1:
              remove_us_dict[modified_datewise_us_list.index(datewise_git_branch)]=each_us_dict['_id']
        removable_us=remove_us_dict[min(remove_us_dict.keys())]
        removing_rm_story_cmd="git for-each-ref --sort=-committerdate refs/remotes/origin | grep "+removable_us+" | head -1 | awk -F'origin/' '{print $NF}'"
        print removing_rm_story_cmd
        removing_rm_branch=subprocess.Popen(removing_rm_story_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
        print "removing rm branch - "+ removing_rm_branch

        #######
        send_us_list=coll_handler.find({'RM_ID.'+rm_to_be_sent : {'$exists' : True}}, {'_id' : 1})
        get_us_by_modified_datewise="git branch -a --sort=-committerdate | awk -F'origin/' '{print $NF}' | uniq"
        modified_datewise_us=subprocess.Popen(get_us_by_modified_datewise,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        modified_datewise_us_list=list(set(modified_datewise_us.strip().splitlines()))
        for each_us_dict in send_us_list:
          for datewise_git_branch in modified_datewise_us_list:
            if datewise_git_branch.find(each_us_dict['_id']) > -1:
              send_us_dict[modified_datewise_us_list.index(datewise_git_branch)]=each_us_dict['_id']
        sending_us=send_us_dict[min(send_us_dict.keys())]
        sending_rm_story_cmd="git for-each-ref --sort=-committerdate refs/remotes/origin | grep "+sending_us+" | head -1 | awk -F'origin/' '{print $NF}'"
        print sending_rm_story_cmd
        sending_rm_branch=subprocess.Popen(sending_rm_story_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
        print "sending rm branch - "+ sending_rm_branch
        sending_tagged_commit_cmd="git for-each-ref --sort=-committerdate refs/remotes/origin | grep "+sending_rm_branch+" | awk -F' ' '{print $1}'"
        sending_tagged_commit_sha=subprocess.Popen(sending_tagged_commit_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        #######

        # DE-CONSOLIDATION begins
        os.system('git checkout '+sending_rm_branch.strip())
        existing_tag_of_sending_rm=subprocess.Popen("git tag --sort=-taggerdate --points-at "+sending_tagged_commit_sha.strip()+" | head -1", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        file_specific_remove_commit_cmd="git log --no-merges --format='%h %s' "+each_sending_file+" | grep "+rm_to_be_removed+" | awk -F' ' '{print $1}'"
        file_specific_send_commit_cmd="git log --no-merges --format='%H %s' "+each_sending_file+" | grep "+rm_to_be_sent+" | awk -F' ' '{print $1}'"
        file_specific_remove_commit_list=subprocess.Popen(file_specific_remove_commit_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].splitlines()
        file_specific_send_commit_list=subprocess.Popen(file_specific_send_commit_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].splitlines()
        #execute revert commands to deconsolidate
        for each_commit in file_specific_remove_commit_list:
          os.system('git revert --no-commit -Xtheirs '+each_commit)
          print "revert done"
          flag=True
    if flag:
      os.system('git config --global user.email "libertyglobal-bss-clarify-internal@accenture.com"')
      os.system('git config --global user.name "LibertyGlobal-BSS-Clarify Workspace Internal User"')
      sha_msg='"De-consolidating '+rm_to_be_removed[3:]+' for '+rm_to_be_sent+'"'
      os.system('git commit -m '+sha_msg)
      cmd="git log --grep="+sha_msg+" --date-order | grep '^commit '| awk '{print $2}' | head -1"
      sha_msg_commit=subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
      os.system('git push origin '+sending_rm_branch)
      # Creating New Tag for De-Consolidated Code based on the old tag
      if existing_tag_of_sending_rm.find('.') > 0:
        latest_tag_of_sending_rm=existing_tag_of_sending_rm.rsplit('.',1)[0]+'.'+str(int(existing_tag_of_sending_rm.rsplit('.',1)[1])+1)
        os.system('git tag -a '+latest_tag_of_sending_rm+' -m "Tagging for '+rm_to_be_sent+' to deliver '+sending_rm_branch+'"')
        os.system('git push --tags')
      #Cherry-Picking De-Consolidation Activity onto Master
      sending_rm_HEAD_cmd='git rev-parse HEAD'
      sending_rm_HEAD=subprocess.Popen(sending_rm_HEAD_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
      os.system('git checkout master')
      os.system('git cherry-pick --no-commit -Xtheirs '+sending_rm_HEAD)
      os.system('git commit --allow-empty -m "Cherry-Picked latest commit of '+sending_rm_branch+'"')
      os.system('git push origin master')
      # DECONSOLIDATION ended

      # CONSOLIDATION begins
      rm_to_be_added=rm_to_be_removed
      adding_rm_branch=removing_rm_branch.strip()
      os.system('git checkout '+adding_rm_branch)
      for each_commit in file_specific_send_commit_list:
        if each_commit.strip() != sending_rm_HEAD.strip():
          os.system('git cherry-pick --no-commit -Xours '+each_commit)

      con_sha_msg='"Consolidating '+rm_to_be_sent[3:]+' for '+rm_to_be_added+'"'
      os.system('git commit -m '+con_sha_msg)
      os.system('git push origin '+adding_rm_branch)
      removing_commit_cmd="git for-each-ref --sort=-committerdate refs/remotes/origin | grep "+adding_rm_branch+" | awk -F' ' '{print $1}'"
      removing_commit=subprocess.Popen(removing_commit_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
      removing_tagged_commit_sha=subprocess.Popen('git rev-parse '+removing_commit+'~1', shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
      print "removing tagged commit sha : "+removing_tagged_commit_sha
      existing_tag_of_adding_rm=subprocess.Popen("git tag --sort=-taggerdate --points-at "+ removing_tagged_commit_sha.strip()+" | head -1", shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
      print "existing tag of adding rm : "+existing_tag_of_adding_rm
      if existing_tag_of_adding_rm.find('.') > 0:
        latest_tag_of_adding_rm=existing_tag_of_adding_rm.rsplit('.',1)[0]+'.'+str(int(existing_tag_of_adding_rm.rsplit('.',1)[1])+1)
        os.system('git tag -a '+latest_tag_of_adding_rm+' -m "Tagging for '+rm_to_be_added+' to deliver '+adding_rm_branch+'"')
        os.system('git push --tags')
      #Cherry-Picking Consolidation Activity on to the Master
      adding_rm_HEAD_cmd='git rev-parse HEAD'
      adding_rm_HEAD=subprocess.Popen(adding_rm_HEAD_cmd,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()
      os.system('git checkout master')
      os.system('git cherry-pick --no-commit -Xtheirs '+adding_rm_HEAD)
      os.system('git commit --allow-empty -m "Cherry-Picked latest commit of '+removing_rm_branch.strip()+'"')
      os.system('git push origin master')
      #Creating New Tag for Consolidated Code based on Old Tag

      msg="Deconsolidation and Consolidation is completed"
      print msg
      # CONSOLIDATION ended
    else:
      msg="There are no common components between "+ rm_to_be_sent +" and " + rm_to_be_removed
  return msg

def main_func(affiliate, rm_string):
    global country
    global coll_handler
    country=affiliate.lower()
    coll_handler=db[country+'-ci']
    os.chdir('/clarify_cdc/')
    os.environ['no_proxy']='devops.upc.biz'
    os.system('rm -rf *-'+country)
    os.system('git clone https://'+gitlab_user+':'+gitlab_pwd+'@devops.upc.biz/gitlab/LibertyGlobal/cbbatch-'+country+'.git')
    os.system('git clone https://'+gitlab_user+':'+gitlab_pwd+'@devops.upc.biz/gitlab/LibertyGlobal/cbform-'+country+'.git')
    os.system('git clone https://'+gitlab_user+':'+gitlab_pwd+'@devops.upc.biz/gitlab/LibertyGlobal/globals-'+country+'.git')
    rm_time_dict={}
    input_rm_list=rm_string.strip().split()
    for each_rm in input_rm_list:
      try:
        rm_dict=coll_handler.find_one({'RM_ID.'+each_rm : { '$exists' : True }},  {'RM_ID.'+each_rm : 1})
      except Exception as e :
        print e
        return "Please perform CI for this ticket - "+each_rm+", then only CDC tool will work as expected"
      if not rm_dict is None:
        rm_time_dict[datetime.datetime.strptime(rm_dict['RM_ID'][each_rm]['build_time'], '%Y_%m_%d_%H_%M_%S').ctime()]=each_rm
    print rm_time_dict
    dates_list=rm_time_dict.keys()
    dates_list.sort(key=lambda date: datetime.datetime.strptime(date, '%a %b  %d %H:%M:%S %Y'))
    sorted_dates_list=dates_list
    sorted_rm_list=[rm_time_dict[each_date] for each_date in sorted_dates_list]
    print "Developed Order : "+str(sorted_rm_list)
    print "To be Deployed Order : "+str(input_rm_list)
    cdc_rm_list=[]
    for each_rm in input_rm_list:
      print each_rm
      i=sorted_rm_list.index(each_rm)
      if i != 0:
        temp_dc_list=sorted_rm_list[:i]
        print str(temp_dc_list)+" to be deconsolidated from "+each_rm
        for each_dc_rm in temp_dc_list:
          msg=cdc(each_rm, each_dc_rm)
        sorted_rm_list.remove(each_rm)
        cdc_rm_list.append(each_rm)
    return "Consolidation and De-Consolidation is Completed Successfully..! :-) "

def perform_build(cdc_rm_list):
        print "RUN ci pipeline for "


#pdb.set_trace()
#Desiging layout of page
app.layout = html.Div([
    #Including local stylesheet
        html.Link(href='/static/layout_style.css', rel='stylesheet'),
    html.H1(children='CLARIFY CONSOLIDATION/DECONSOLIDATION',id ='release-deployment-history', style={'textAlign': 'center','color': '#3104B4'}),
    #html.Br(),
        html.Img(
        src='/img/logo-client-liberty-color.jpg',
        style={
            'height' : '10%',
            'width' : '10%',
            'padding-left': '600px',
        }
       ),
    #html.Br(),
        #html.Br(),
    html.Div([html.Table(
        # Header
        children=[
            html.Thead(
                html.Tr([
                    html.Th(children=html.B('LGDOP'), colSpan='2',style={'textAlign': 'center','padding-top':'10px', 'padding-bottom':'20px','padding-left': '10px','padding-right': '30px','color': '#2ECC71','fontSize':30}),
                ]))],style={
            'margin-left': 'auto',
            'margin-right': 'auto',
            'padding-left': '50px',
            'padding-right': '50px',
            'textAlign': 'left',
            'border':'1px'
            })]),
    html.Br(),
    html.Br(),
    html.Div(id='Affiliate_temp_store',style={'display':'none'}),
    html.Div(id='rm_ticket_temp_store',style={'display':'none'}),
    dcc.Location(id='url', refresh=False),
    html.Div(id='load_layout'),
    #html.Div(id='cdc_result',style={'textAlign':'center','color':'#6B8E23'})
    ])

home_page=html.Div([
        html.Table(
        # Header
        children=[

        # Body
            html.Tbody(
                [html.Tr([
                    html.Td('Affiliate',style={'padding-bottom':'10px','padding-right': '30px','textAlign': 'left','color':'#DF0101','fontSize': 20}),
                    html.Td(children=html.Div(dcc.Dropdown(id='Affiliate',
                                                           options=[{'label': k, 'value': k} for k in affiliate_list],
                                                           style={'color':'#597E16','width':'80px'})),style={'padding-bottom':'10px','padding-left': '10px','padding-right': '40px'})
                    ]),
                html.Tr([
                    html.Td('Patches Deployment Order',style={'padding-bottom':'10px','padding-right': '30px','textAlign': 'left','color':'#DF0101','fontSize': 20}),
                    html.Td(children=html.Div(dcc.Textarea(id = 'rm-ticket',
                                                                                 placeholder='RM Ticket',value='',minLength='500px',maxLength='1000px',
                                                             style={'color':'#597E16','width':'100px','height':'200px'})),style={'padding-bottom':'10px','padding-left': '10px','padding-right': '40px'})
                    ])
                ])
    ],style={
            'margin-left': 'auto',
            'margin-right': 'auto',
            'padding-left': '50px',
            'padding-right': '50px',
            'textAlign': 'left',
            'border':'1px'
            }),
    html.Br(),
    html.Div(id='submit_button'),

        html.Br(),
        html.Br(),
        html.Div(id='display_final_result'),
 ])

build_layout=html.Div(html.Div(html.Div("In Progress...",style={'fontSize':20}),id='temp_id'),id='cdc_result',style={'textAlign':'center','color':'#6B8E23','fontSize':15})

build_status_layout=html.Div(html.Div(id='temp_status_id',children=''),id='status',style={'textAlign':'center','color':'#6B8E23','fontSize':20})

@app.callback(
    Output('submit_button','children'),
    [Input('rm-ticket', 'value'),
     Input('Affiliate', 'value' )])
def display_insert_button(rm_ticket,Affiliate):
    if Affiliate and rm_ticket and re.search(r'(RM-[0-9]{5,6}\n{0,}){2,}',rm_ticket):
        return html.Div(html.Button(id='Submit',
                         n_clicks=0, children = dcc.Link('Submit',href='/cdc/build'),
                         style={'color':'#597E16','width':'85px',}),style={'padding-left':'465px'})
    else:
        return html.Div('Please Ensure to Provide Proper RM Tickets!!!',style={'padding-left': '425px','textAlign': 'left','color': '#08298A','fontSize':25})

@app.callback(Output('Affiliate_temp_store','children'),
              [Input('Affiliate','value')])
def store_affiliate(Affiliate):
    return Affiliate

@app.callback(Output('rm_ticket_temp_store','children'),
              [Input('rm-ticket','value')])
def store_rm_ticket(rm_ticket):
    return rm_ticket

@app.callback(Output('cdc_result','children'),
              [Input('temp_id','children')],
              [State('url','pathname'),State('Affiliate_temp_store','children'),State('rm_ticket_temp_store','children')])
def display_cdc_result(temp,path,Affiliate,rm_ticket):
    if path == '/cdc/build':
        if not Affiliate is None:
            #calling cdc main function
            output=main_func(affiliate=Affiliate.lower(), rm_string=rm_ticket)
            return html.Div([
                    html.Table(
        # Header
        children=[
            html.Tbody([
                html.Tr([
                    html.Th('Country', style=th_style),
                    html.Td(Affiliate,style=th_style)]),

                html.Tr([
                    html.Th('RM Deployment Order',style=th_style),
                    html.Td(rm_ticket,style=td_style)
                    ])]
                )
    ],style={
            'margin-left': 'auto',
            'margin-right': 'auto',
            'padding-left': '50px',
            'padding-right': '50px',
            'textAlign': 'left',
            }),   
                    html.Br(),
                    html.Div(output),
                    html.Br(),
                    html.Button(id='Build',
                         n_clicks=0, children = dcc.Link('Build',href='/cdc/build_status'),
                         style={'color':'#597E16','width':'85px',})])
        else:
            return html.Div([html.B("Please go to home page to enter the inputs... "),
                            dcc.Link('Home Page',href='/cdc')],style={'textAlign':'center'})

@app.callback(Output('status','children'),
              [Input('temp_status_id','children')],
              [State('url','pathname'),State('Affiliate_temp_store','children'),State('rm_ticket_temp_store','children')])
def display_build_status_result(temp,path,Affiliate,rm_ticket):
    if path == '/cdc/build_status':
        if not Affiliate is None:
            return html.H1("Build in progress...")
        else:
            return html.Div([html.B("Please go to home page to enter the inputs... "),
                            dcc.Link('Home Page',href='/cdc')],style={'textAlign':'center'})

@app.callback(Output('load_layout', 'children'),
              [Input('url', 'pathname')])
def display_page(pathname):
    if pathname == '/cdc' or pathname == '/cdc/':
        return home_page
    elif pathname=='/cdc/build':
        return build_layout
    elif pathname=='/cdc/build_status':
        return build_status_layout

if __name__ == '__main__':
    server.run(debug=True)
